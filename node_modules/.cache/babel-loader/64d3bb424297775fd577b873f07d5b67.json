{"ast":null,"code":"\"use strict\";\n\nvar fuse = require('../lib/fuse');\n\nexports.fuseContent = function (content, relativePath, mode, callback) {\n  var content = content || '',\n      path = path || '',\n      mode = mode || 'js',\n      fuser; // check we have content\n\n  if (!content.length) return callback(null, content); // check we have a path\n\n  if (!relativePath.length) return callback(new Error('No relative path was supplied.'));\n  fuser = new fuse.Fuse();\n  fuser.on('fuse', function (results) {\n    // an object with updated, and fused is returned\n    callback(null, results.updated);\n  });\n  fuser.on('nofuse', function (results) {\n    // only the original content is returned\n    callback(null, results.updated);\n  });\n  fuser.on('error', function (err) {\n    callback(err);\n  });\n  fuser.fuseContent(content, relativePath, mode);\n};\n\nexports.fuseFile = function (input, output, callback) {\n  // arguments: input, output, compress, mangle, lint\n  var fuser = fuse.fuse(input, output);\n  fuser.on('fuse', function (results) {\n    callback(null, results);\n  });\n  fuser.on('nofuse', function (results) {\n    callback(null, results);\n  });\n  fuser.on('error', function (err) {\n    callback(err);\n  }); // fuse the file, and the thrown events will take care of process exit\n\n  fuser.fuseFile();\n};","map":null,"metadata":{},"sourceType":"script"}