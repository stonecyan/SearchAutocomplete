{"ast":null,"code":"var _jsxFileName = \"/Users/Stone/Desktop/TextIQ/autocomplete/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Fuse from 'fuse.js';\nimport faker from 'faker'; // --------------- API START --------------\n\nfunction simulateResponseTime({\n  min,\n  max\n}) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfaker.seed(42);\nconst users = Array.from({\n  length: 100\n}).map(() => {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email()\n  };\n});\nconst fuse = new Fuse(users, {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: [\"name\"]\n});\n/**\n * Search users by name\n * @param {string} query - The query to search users by\n * @return {Promise<{ name: string; email: string; }[]>} Search result\n */\n\nfunction searchUsersByName(query) {\n  return new Promise(resolve => {\n    window.setTimeout(() => {\n      resolve(fuse.search(query));\n    }, simulateResponseTime({\n      min: 200,\n      max: 350\n    }));\n  });\n} // ---------------- API END ---------------\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberSuggestion: 0,\n      suggestions: [],\n      showSuggestions: false,\n      userInput: ''\n    };\n  }\n\n  onChange(e) {\n    const userInput = e.target.value;\n    const suggestions = searchUsersByName(userInput);\n    console.log(this.state);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Stone/Desktop/TextIQ/autocomplete/src/App.js"],"names":["React","Fuse","faker","simulateResponseTime","min","max","Math","floor","random","seed","users","Array","from","length","map","name","findName","email","internet","fuse","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","searchUsersByName","query","Promise","resolve","window","setTimeout","search","App","Component","constructor","props","state","numberSuggestion","suggestions","showSuggestions","userInput","onChange","e","target","value","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AAEA,SAASC,oBAAT,CAA8B;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAA9B,EAA4C;AAC1C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAP;AACD;;AACDF,KAAK,CAACO,IAAN,CAAW,EAAX;AAEA,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAX,EAA4BC,GAA5B,CAAgC,MAAM;AAClD,SAAO;AACLC,IAAAA,IAAI,EAAEb,KAAK,CAACa,IAAN,CAAWC,QAAX,EADD;AAELC,IAAAA,KAAK,EAAEf,KAAK,CAACgB,QAAN,CAAeD,KAAf;AAFF,GAAP;AAID,CALa,CAAd;AAOA,MAAME,IAAI,GAAG,IAAIlB,IAAJ,CAASS,KAAT,EAAgB;AAC3BU,EAAAA,UAAU,EAAE,IADe;AAE3BC,EAAAA,SAAS,EAAE,GAFgB;AAG3BC,EAAAA,QAAQ,EAAE,CAHiB;AAI3BC,EAAAA,QAAQ,EAAE,GAJiB;AAK3BC,EAAAA,gBAAgB,EAAE,EALS;AAM3BC,EAAAA,kBAAkB,EAAE,CANO;AAO3BC,EAAAA,IAAI,EAAE,CAAC,MAAD;AAPqB,CAAhB,CAAb;AAUA;;;;;;AAKA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BC,IAAAA,MAAM,CAACC,UAAP,CAAkB,MAAM;AACtBF,MAAAA,OAAO,CAACX,IAAI,CAACc,MAAL,CAAYL,KAAZ,CAAD,CAAP;AACD,KAFD,EAEGzB,oBAAoB,CAAC;AAAEC,MAAAA,GAAG,EAAE,GAAP;AAAYC,MAAAA,GAAG,EAAE;AAAjB,KAAD,CAFvB;AAGD,GAJM,CAAP;AAKD,C,CAED;;;AAGA,MAAM6B,GAAN,SAAkBlC,KAAK,CAACmC,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,gBAAgB,EAAE,CADP;AAEXC,MAAAA,WAAW,EAAE,EAFF;AAGXC,MAAAA,eAAe,EAAE,KAHN;AAIXC,MAAAA,SAAS,EAAC;AAJC,KAAb;AAMD;;AAEDC,EAAAA,QAAQ,CAACC,CAAD,EAAG;AACT,UAAMF,SAAS,GAAGE,CAAC,CAACC,MAAF,CAASC,KAA3B;AAEA,UAAMN,WAAW,GAAGb,iBAAiB,CAACe,SAAD,CAArC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAjB;AACD;;AAEDW,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,MADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAOD;;AA3B+B;;AA8BlC,eAAef,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Fuse from 'fuse.js';\nimport faker from 'faker';\n\n// --------------- API START --------------\n\nfunction simulateResponseTime({ min, max }) {\n  return Math.floor(Math.random() * (max - min) + min)\n}\nfaker.seed(42)\n\nconst users = Array.from({ length: 100 }).map(() => {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email()\n  }\n})\n\nconst fuse = new Fuse(users, {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: [\"name\"]\n})\n\n/**\n * Search users by name\n * @param {string} query - The query to search users by\n * @return {Promise<{ name: string; email: string; }[]>} Search result\n */\nfunction searchUsersByName(query) {\n  return new Promise(resolve => {\n    window.setTimeout(() => {\n      resolve(fuse.search(query));\n    }, simulateResponseTime({ min: 200, max: 350 }));\n  })\n}\n\n// ---------------- API END ---------------\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      numberSuggestion: 0,\n      suggestions: [],\n      showSuggestions: false,\n      userInput:''\n    }\n  }\n\n  onChange(e){\n    const userInput = e.target.value\n\n    const suggestions = searchUsersByName(userInput)\n    console.log(this.state)\n  }\n\n  render(){\n    return (\n      <div>\n        <input\n          type=\"text\"\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}