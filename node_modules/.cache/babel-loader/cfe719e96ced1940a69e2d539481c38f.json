{"ast":null,"code":"var _jsxFileName = \"/Users/Stone/Desktop/TextIQ/autocomplete/src/App.js\";\nimport React from 'react';\nimport Fuse from 'fuse.js';\nimport faker from 'faker'; // --------------- API START --------------\n\nfunction simulateResponseTime({\n  min,\n  max\n}) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfaker.seed(42);\nconst users = Array.from({\n  length: 100\n}).map(() => {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email()\n  };\n});\nconst fuse = new Fuse(users, {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: [\"name\"]\n});\n/**\n * Search users by name\n * @param {string} query - The query to search users by\n * @return {Promise<{ name: string; email: string; }[]>} Search result\n */\n\nfunction searchUsersByName(query) {\n  return new Promise(resolve => {\n    window.setTimeout(() => {\n      resolve(fuse.search(query));\n    }, simulateResponseTime({\n      min: 200,\n      max: 350\n    }));\n  });\n} // ---------------- API END ---------------\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberSuggestion: 0,\n      suggestions: [],\n      show: false,\n      userInput: ''\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onChange(e) {\n    const userInput = e.target.value;\n    searchUsersByName(userInput).then(suggestionAPI => {\n      this.setState({\n        numberSuggestion: 0,\n        suggestionAPI,\n        show: true,\n        userInput: userInput\n      });\n    });\n  }\n\n  onClick(e) {\n    this.setState({\n      numberSuggestion: 0,\n      suggestions: [],\n      show: false,\n      userInput: e.target.innerText\n    });\n  }\n\n  render() {\n    const onChange = this.onChange,\n          onClick = this.onClick,\n          onKey = this.onKey,\n          _this$state = this.state,\n          numberSuggestion = _this$state.numberSuggestion,\n          suggestions = _this$state.suggestions,\n          show = _this$state.show,\n          userInput = _this$state.userInput;\n    let suggestionList;\n\n    if (show && userInput) {\n      if (suggestions.length) {\n        console.log(suggestions.length);\n        suggestionList = React.createElement(\"ul\", {\n          class: \"suggestionList\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, suggestions.map((suggestion, index) => {\n          let className;\n\n          if (index === numberSuggestion) {\n            className = \"activeSuggestion\";\n          }\n\n          return React.createElement(\"li\", {\n            className: className,\n            key: suggestion,\n            onClick: onClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          }, suggestion);\n        }));\n      } else {\n        suggestionList = React.createElement(\"div\", {\n          className: \"noSuggestionList\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, \"No matching names\"));\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: onChange,\n      onClick: onClick,\n      value: userInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), suggestionList);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Stone/Desktop/TextIQ/autocomplete/src/App.js"],"names":["React","Fuse","faker","simulateResponseTime","min","max","Math","floor","random","seed","users","Array","from","length","map","name","findName","email","internet","fuse","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","searchUsersByName","query","Promise","resolve","window","setTimeout","search","App","Component","constructor","props","state","numberSuggestion","suggestions","show","userInput","onChange","bind","onClick","e","target","value","then","suggestionAPI","setState","innerText","render","onKey","suggestionList","console","log","suggestion","index","className"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Fuse from 'fuse.js';\nimport faker from 'faker';\n\n// --------------- API START --------------\n\nfunction simulateResponseTime({ min, max }) {\n  return Math.floor(Math.random() * (max - min) + min)\n}\nfaker.seed(42)\n\nconst users = Array.from({ length: 100 }).map(() => {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email()\n  }\n})\n\nconst fuse = new Fuse(users, {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: [\"name\"]\n})\n\n/**\n * Search users by name\n * @param {string} query - The query to search users by\n * @return {Promise<{ name: string; email: string; }[]>} Search result\n */\nfunction searchUsersByName(query) {\n  return new Promise(resolve => {\n    window.setTimeout(() => {\n      resolve(fuse.search(query));\n    }, simulateResponseTime({ min: 200, max: 350 }));\n  })\n}\n\n// ---------------- API END ---------------\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      numberSuggestion: 0,\n      suggestions: [],\n      show: false,\n      userInput:''\n    }\n\n    this.onChange= this.onChange.bind(this)\n    this.onClick= this.onClick.bind(this)\n  }\n\n  onChange(e){\n    const userInput = e.target.value\n    searchUsersByName(userInput).then((suggestionAPI) =>{\n        this.setState({\n        numberSuggestion: 0,\n        suggestionAPI,\n        show:true,\n        userInput: userInput\n      })\n    })\n\n  }\n\n  onClick(e){\n    this.setState({\n      numberSuggestion: 0,\n      suggestions: [],\n      show: false,\n      userInput: e.target.innerText\n    })\n  }\n\n\n  render(){\n    const{\n      onChange,\n      onClick,\n      onKey,\n      state: {\n        numberSuggestion,\n        suggestions,\n        show,\n        userInput\n      }\n    } = this\n\n    let suggestionList\n\n    if(show && userInput){\n      if(suggestions.length){\n        console.log(suggestions.length)\n        suggestionList = (\n          <ul class=\"suggestionList\">\n            {suggestions.map((suggestion, index) => {\n              let className\n              if(index===numberSuggestion){\n                className = \"activeSuggestion\"\n              }\n              return(\n                <li className={className} key={suggestion} onClick={onClick}>\n                  {suggestion}\n                </li>\n              )\n            })\n            }\n          </ul>\n        )\n      }\n      else{\n        suggestionList = (\n          <div className=\"noSuggestionList\">\n            <p>No matching names</p>\n          </div>\n        )\n      }\n    }\n\n    return (\n      <div>\n        <input\n          type=\"text\"\n          onChange={onChange}\n          onClick={onClick}\n          value={userInput}\n        />\n        {suggestionList}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}